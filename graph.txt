import sys
import time
sys.path.insert(0, './lib')

import networkx as nx
import matplotlib.pyplot as plt

class Graphe:
    def __init__(self, memType, taille, oriente=False):
        """
        Initialise un objet Graphe avec les paramètres spécifiés.

        Args:
            memType (str): Type de représentation en mémoire ('matrice' ou 'liste').
            taille (int): Nombre de nœuds dans le graphe.
            oriente (bool, optional): Indique si le graphe est orienté. Par défaut False.
        """
        self.taille = taille
        self.oriente = oriente
        self.memType = memType

        if self.memType == 'matrice':
            self.graphe = [[0] * taille for _ in range(taille)]
        elif self.memType == 'liste':
            self.graphe = {i: [] for i in range(taille)}

    def ajouter_arete(self, u, v):
        """
        Ajoute une arête entre les nœuds u et v dans le graphe.

        Args:
            u (int): Nœud source.
            v (int): Nœud cible.
        """
        if self.memType == 'matrice':
            self.graphe[u][v] = 1
            if not self.oriente:
                self.graphe[v][u] = 1
        elif self.memType == 'liste':
            self.graphe[u].append(v)
            if not self.oriente:
                self.graphe[v].append(u)

    def ajouter_arc(self, u, v):
        """
        Ajoute un arc du nœud u vers le nœud v dans le graphe.

        Args:
            u (int): Nœud source.
            v (int): Nœud cible.
        """
        if self.memType == 'matrice':
            self.graphe[u][v] = 1
        elif self.memType == 'liste':
            self.graphe[u].append(v)

    def ajouter_lien(self, a, b):
        """
        Ajoute un lien entre les nœuds a et b dans le graphe.

        Args:
            a (int): Nœud source.
            b (int): Nœud cible.
        """
        if self.memType == 'liste':
            self.graphe[a].append(b)
            self.graphe[b].append(a)
        elif self.memType == 'matrice':
            self.graphe[a][b] = 1
            self.graphe[b][a] = 1

    def ajouter_noeud(self):
        """
        Ajoute un nouveau nœud au graphe.
        """
        if self.memType == 'liste':
            self.graphe.append([])
        elif self.memType == 'matrice':
            for row in self.graphe:
                row.append(0)
            self.graphe.append([0] * len(self.graphe[0]))
        self.taille += 1

    def supprimer_noeud(self, a):
        """
        Supprime un nœud du graphe.

        Args:
            a (int): Nœud à supprimer.
        """
        if self.memType == 'liste':
            self.graphe.pop(a)
            for row in self.graphe:
                if a in row:
                    row.remove(a)
        elif self.memType == 'matrice':
            self.graphe.pop(a)
            for row in self.graphe:
                row.pop(a)
        self.taille -= 1

    def afficher_graphe(self):
        """
        Affiche le graphe en utilisant la bibliothèque NetworkX et Matplotlib.
        """
        G = nx.Graph() if not self.oriente else nx.DiGraph()
        if self.memType == 'matrice':
            G.add_nodes_from(range(self.taille))
            for u in range(self.taille):
                for v in range(self.taille):
                    if self.graphe[u][v] == 1:
                        G.add_edge(u, v)
        elif self.memType == 'liste':
            for u, voisins in self.graphe.items():
                for v in voisins:
                    G.add_edge(u, v)
        nx.draw(G, with_labels=True)
        plt.show()

    def afficher(self):
        """
        Affiche le graphe.
        """
        if self.memType == 'liste':
            for noeud, voisins in self.graphe.items():
                print(f'{noeud}: {voisins}')
        elif self.memType == 'matrice':
            for ligne in self.graphe:
                print(ligne)

    def calculer_densite(self):
        """
        Calcule la densité du graphe.
        """
        if self.oriente:  # Graphe orienté
            max_aretes = self.taille * (self.taille - 1)
        else:  # Graphe non orienté
            max_aretes = self.taille * (self.taille - 1) / 2

        if self.memType == 'liste':
            nb_aretes = sum(len(voisins) for voisins in self.graphe.values())
        elif self.memType == 'matrice':
            nb_aretes = sum(sum(1 for v in ligne if v != 0) for ligne in self.graphe)

        if not self.oriente:
            nb_aretes /= 2

        print(nb_aretes / max_aretes if max_aretes > 0 else 0)

    def calculer_degre(self, noeud):
        """
        Calcule le degré d'un nœud donné.

        Args:
            noeud (int): Nœud pour lequel calculer le degré.
        """
        if self.memType == 'liste':
            print(len(self.graphe[noeud]))
        elif self.memType == 'matrice':
            print(sum(1 for v in self.graphe[noeud] if v != 0))

    def calculer_degre_total(self):
        """
        Calcule le degré total du graphe.
        """
        print(sum(self.calculer_degre(noeud) for noeud in range(self.taille)))

    def dfs(self, noeud, visite):
        """
        Parcours en profondeur d'abord (DFS) à partir d'un nœud donné.

        Args:
            noeud (int): Nœud de départ.
            visite (list): Liste pour suivre les nœuds visités.
        """
        visite.append(noeud)
        if self.memType == 'liste':
            for voisin in self.graphe[noeud]:
                if voisin not in visite:
                    self.dfs(voisin, visite)
        elif self.memType == 'matrice':
            for i, est_voisin in enumerate(self.graphe[noeud]):
                if est_voisin and i not in visite:
                    self.dfs(i, visite)

    def est_eulerien(self):
        """
        Vérifie si le graphe est eulérien.
        """
        if self.memType == 'liste':
            degres_non_nuls = [noeud for noeud, voisins in self.graphe.items() if len(voisins) > 0]
        elif self.memType == 'matrice':
            degres_non_nuls = [i for i in range(self.taille) if any(self.graphe[i])]

        if len(degres_non_nuls) == 0:
            print("Le graphe est eulérien")

        visite = []
        self.dfs(degres_non_nuls[0], visite)
        if len(visite) != len(degres_non_nuls):
            print("Le graphe n'est pas eulérien")

        if self.memType == 'liste':
            for voisins in self.graphe.values():
                if len(voisins) % 2 != 0:
                    print("Le graphe n'est pas eulérien")

        elif self.memType == 'matrice':
            for i in range(self.taille):
                if sum(self.graphe[i]) % 2 != 0:
                    print("Le graphe n'est pas eulérien")

        print("Le graphe est eulérien")

    def est_complet(self):
        """
        Vérifie si le graphe est complet.
        """
        if self.memType == 'liste':
            for voisins in self.graphe.values():
                if len(voisins) != self.taille - 1:
                    print("Le graphe n'est pas complet")
                    return
        elif self.memType == 'matrice':
            for ligne in self.graphe:
                if sum(ligne) != self.taille - 1:
                    print("Le graphe n'est pas complet")
                    return

        print("Le graphe est complet")

    def est_arbre(self):
        """
        Vérifie si le graphe est un arbre.
        """
        if self.memType == 'liste':
            nb_aretes = sum(len(voisins) for voisins in self.graphe.values())
        elif self.memType == 'matrice':
            nb_aretes = sum(sum(1 for v in ligne if v != 0) for ligne in self.graphe)

        if nb_aretes != self.taille - 1:
            print("Le graphe n'est pas un arbre")
            return

        visite = []
        self.dfs(0, visite)
        if len(visite) != self.taille:
            print("Le graphe n'est pas un arbre")
            return

        print("Le graphe est un arbre")

    def recherche_noeud(self, a):
        """
        Recherche un nœud donné dans le graphe et affiche ses connexions.

        Args:
            a (int): Nœud à rechercher.
        """
        if self.memType == 'liste':
            if a not in self.graphe:
                print(f"Le noeud {a} n'existe pas dans le graphe.")
                return
            print(f"Le noeud {a} est connecté à : {self.graphe[a]}")
        elif self.memType == 'matrice':
            if a < 0 or a >= self.taille:
                print(f"Le noeud {a} n'existe pas dans le graphe.")
                return
            connexions = [i for i, est_connecte in enumerate(self.graphe[a]) if est_connecte]
            print(f"Le noeud {a} est connecté à : {connexions}")

    def trouver_chemins(self, a, b, visite, chemin):
        """
        Trouve tous les chemins entre deux nœuds donnés.

        Args:
            a (int): Nœud de départ.
            b (int): Nœud d'arrivée.
            visite (list): Liste pour suivre les nœuds visités.
            chemin (list): Liste pour suivre le chemin actuel.
        """
        visite[a] = True
        chemin.append(a)

        if a == b:
            print("Chemin : ", chemin)
        else:
            if self.memType == 'liste':
                for i in self.graphe[a]:
                    if visite[i] == False:
                        self.trouver_chemins(i, b, visite, chemin)
            elif self.memType == 'matrice':
                for i, est_connecte in enumerate(self.graphe[a]):
                    if est_connecte and not visite[i]:
                        self.trouver_chemins(i, b, visite, chemin)

        chemin.pop()
        visite[a] = False

    def recherche_chemins(self, a, b):
        """
        Recherche tous les chemins entre deux nœuds donnés.

        Args:
            a (int): Nœud de départ.
            b (int): Nœud d'arrivée.
        """
        visite = [False] * (self.taille)
        chemin = []
        self.trouver_chemins(a, b, visite, chemin)

    def dijkstra(self, a, b):
        """
        Applique l'algorithme de Dijkstra pour trouver le chemin le plus court entre deux nœuds.

        Args:
            a (int): Nœud de départ.
            b (int): Nœud d'arrivée.
        """
        dist = [sys.maxsize] * self.taille
        dist[a] = 0
        shortest_path_set = [False] * self.taille

        for _ in range(self.taille):
            u = self.min_distance(dist, shortest_path_set)
            shortest_path_set[u] = True

            for v in range(self.taille):
                if (self.graphe[u][v] > 0 and
                    shortest_path_set[v] == False and
                    dist[v] > dist[u] + self.graphe[u][v]):
                    dist[v] = dist[u] + self.graphe[u][v]

        self.print_solution(dist, b)

    def min_distance(self, dist, shortest_path_set):
        """
        Trouve le nœud avec la plus petite distance parmi ceux qui ne sont pas encore inclus dans le chemin le plus court.

        Args:
            dist (list): Liste des distances.
            shortest_path_set (list): Liste pour suivre les nœuds inclus dans le chemin le plus court.

        Returns:
            int: Index du nœud avec la plus petite distance.
        """
        min_val = sys.maxsize
        for v in range(self.taille):
            if dist[v] < min_val and shortest_path_set[v] == False:
                min_val = dist[v]
                min_index = v
        return min_index

    def print_solution(self, dist, b):
        """
        Affiche la distance la plus courte entre le nœud de départ et le nœud d'arrivée.

        Args:
            dist (list): Liste des distances.
            b (int): Nœud d'arrivée.
        """
        print(f"La distance la plus courte du noeud a au noeud {b} est {dist[b]}")
     
     
     

def create_graph():
    type_graphe = -1
    while type_graphe not in [0, 1]:
        type_graphe = int(input("Type de graphe (0 pour non orienté, 1 pour orienté) : "))

    memType = -1
    while memType not in [0, 1]:
        memType = int(input("Type de représentation en mémoire (0 pour matrice, 1 pour liste) : "))
    memType = 'matrice' if memType == 0 else 'liste'

    nombre_noeuds = int(input("Nombre de nœuds dans le graphe : "))

    graphe = Graphe(memType, nombre_noeuds, oriente=(type_graphe == 1))

    if type_graphe == 0:
        aretes = input("Liste des arêtes (chaque arête doit être un couple de nœuds sans espace, et chaque arête séparée par une virgule) : ").split(',')
        for arete in aretes:
            u, v = map(int, [arete[0], arete[1]])  
            graphe.ajouter_arete(u, v)
    else:
        arcs = input("Liste des arcs (chaque arc doit être un couple de nœuds sans espace, et chaque arc séparé par une virgule) : ").split(',')
        for arc in arcs:
            u, v = map(int, [arc[0], arc[1]]) 
            graphe.ajouter_arc(u, v)
  
    return graphe